function updateWalletUI(e){const t=document.getElementById("connectWalletButton"),n=document.getElementById("error-message")||document.querySelector(".error-message");if(!t||!n)return void console.error("Required UI elements not found");const l=e.phantom.detected,o=e.solflare.detected;l||o?(t.disabled=!1,n.style.display="none",l?(t.textContent="Connect Phantom Wallet",t.classList.add("phantom-button"),t.classList.remove("solflare-button")):o&&(t.textContent="Connect Solflare Wallet",t.classList.add("solflare-button"),t.classList.remove("phantom-button"))):(t.disabled=!0,n.innerHTML='\n      <p>No Solana wallet detected. Please install one of these wallets:</p>\n      <div class="wallet-links">\n        <a href="https://phantom.app/" target="_blank" class="wallet-link phantom">\n          Phantom Wallet\n        </a>\n        <a href="https://solflare.com/" target="_blank" class="wallet-link solflare">\n          Solflare Wallet\n        </a>\n      </div>\n      <p class="small-text">After installation, please reload this extension.</p>\n    ',n.style.display="block")}document.addEventListener("DOMContentLoaded",function(){document.addEventListener("walletAvailabilityChecked",function(e){console.log("Wallet availability check results:",e.detail),e.detail&&(e.detail.phantom.detected||e.detail.solflare.detected)&&updateWalletUI(e.detail)});const e=document.getElementById("connectWalletButton"),t=document.getElementById("disconnectWalletButton"),n=document.getElementById("actionButton"),l=document.getElementById("signMessageButton"),o=document.getElementById("connection-status"),a=document.getElementById("wallet-address"),c=document.getElementById("wallet-status"),s=new SolanaWalletAdapter;function d(s,d=null){if(s&&d){o.textContent="Connected",c.classList.add("connected");const s=d.slice(0,4)+"..."+d.slice(-4);a.textContent=s,a.title=d,a.style.display="block",e.style.display="none",t.style.display="block",n.disabled=!1,l.style.display="block",console.log("UI updated for connected wallet:",d)}else o.textContent="Not connected",c.classList.remove("connected"),a.textContent="",a.style.display="none",e.style.display="block",t.style.display="none",n.disabled=!0,l.style.display="none"}e.addEventListener("click",function(){chrome.runtime.sendMessage({action:"openWalletConnect"},function(e){console.log("Opening wallet connect page:",e)});const e=document.getElementById("error-message");e.innerHTML='\n      <p>Opening wallet connection in a new tab...</p>\n      <p class="small-text">If the tab doesn\'t open, please check your popup blocker settings.</p>\n    ',e.style.display="block";const t=setInterval(()=>{chrome.storage.local.get(["walletConnected","walletPublicKey"],function(n){n.walletConnected&&n.walletPublicKey&&(clearInterval(t),d(!0,n.walletPublicKey),e.style.display="none",console.log("Wallet connected:",n.walletPublicKey))})},1e3);setTimeout(()=>{clearInterval(t)},6e4)}),t.addEventListener("click",async function(){try{await s.disconnect(),chrome.storage.local.remove(["walletConnected","walletPublicKey"]),d(!1)}catch(e){console.error("Failed to disconnect wallet:",e)}}),l.addEventListener("click",async function(){try{l.disabled=!0,l.textContent="Signing...";const e="Hello from My NextJS App Extension!",t=await s.signMessage(e);console.log("Message signed:",t),l.textContent="Signed!",setTimeout(()=>{l.textContent="Sign Message",l.disabled=!1},2e3)}catch(e){console.error("Failed to sign message:",e),l.textContent="Failed",setTimeout(()=>{l.textContent="Sign Message",l.disabled=!1},2e3)}}),n.addEventListener("click",function(){chrome.tabs.query({active:!0,currentWindow:!0},function(e){const t=e[0];chrome.tabs.sendMessage(t.id,{action:"performAction",walletAddress:s.publicKey},function(e){e&&"success"===e.status&&(n.textContent="Action Completed!",setTimeout(function(){n.textContent="Take Action"},2e3))})})}),chrome.storage.local.get(["walletConnected","walletPublicKey"],function(e){e.walletConnected&&e.walletPublicKey?(d(!0,e.walletPublicKey),s.connect().then(({publicKey:e})=>{d(!0,e)}).catch(e=>{console.log("Could not reconnect to wallet, but keeping stored connection:",e)})):d(!1)}),function(){if(!document.getElementById("error-message")){const e=document.createElement("div");e.id="error-message",e.className="error-message",document.querySelector(".wallet-section").appendChild(e)}console.log("Checking for stored wallet connection"),chrome.storage.local.get(["walletConnected","walletPublicKey"],function(e){e.walletConnected&&e.walletPublicKey&&(console.log("Found stored wallet connection:",e.walletPublicKey),d(!0,e.walletPublicKey))})}(),process.env.NODE_ENV;{const e=document.querySelector(".footer");if(e){const t=document.createElement("div");t.className="dev-mode-toggle",chrome.storage.local.get(["useLocalDevelopment"],function(n){const l=n.useLocalDevelopment||!1;t.innerHTML=`\n          <label class="switch">\n            <input type="checkbox" id="devModeCheckbox" ${l?"checked":""}>\n            <span class="slider"></span>\n          </label>\n          <span class="dev-mode-label">Local Development</span>\n        `,e.appendChild(t);const o=document.getElementById("devModeCheckbox");o&&o.addEventListener("change",function(){chrome.runtime.sendMessage({action:"toggleDevelopmentMode"},function(e){console.log("Development mode toggled:",e)})})})}}});